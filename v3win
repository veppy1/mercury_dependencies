# V3 Windows Development Environment Installer
# This script installs JDK, Node.js, Android SDK Command-line Tools, and Appium

# Ensure script is run as Administrator
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "Please run this script as Administrator"
    Exit
}

$ErrorActionPreference = "Stop"

function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    } else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Refresh-Environment {
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
}

function Install-Chocolatey {
    if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-ColorOutput Yellow "Installing Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        Refresh-Environment
        Write-ColorOutput Green "Chocolatey installed successfully."
    } else {
        Write-ColorOutput Yellow "Chocolatey is already installed."
    }
}

function Install-JDK {
    $javaHome = [System.Environment]::GetEnvironmentVariable("JAVA_HOME", [System.EnvironmentVariableTarget]::User)
    if ($javaHome -and (Test-Path $javaHome)) {
        Write-ColorOutput Yellow "Found Java at $javaHome"
    } else {
        Write-ColorOutput Yellow "Java not found. Installing OpenJDK 11..."
        & "$env:ProgramData\chocolatey\bin\choco.exe" install openjdk11 -y --force
        $javaHome = "C:\Program Files\OpenJDK\jdk-11.0.2"
    }
    [System.Environment]::SetEnvironmentVariable("JAVA_HOME", $javaHome, [System.EnvironmentVariableTarget]::User)
    Refresh-Environment
    Write-ColorOutput Green "JAVA_HOME set to $javaHome"
}

function Install-NodeJS {
    if (Get-Command node -ErrorAction SilentlyContinue) {
        $nodePath = (Get-Command node).Path
        $nodeHome = Split-Path -Parent $nodePath
        Write-ColorOutput Yellow "Found Node.js at $nodeHome"
    } else {
        Write-ColorOutput Yellow "Node.js not found. Installing..."
        & "$env:ProgramData\chocolatey\bin\choco.exe" install nodejs-lts -y
        Refresh-Environment
        $nodeHome = "C:\Program Files\nodejs"
    }
    [System.Environment]::SetEnvironmentVariable("NODE_HOME", $nodeHome, [System.EnvironmentVariableTarget]::User)
    Refresh-Environment
    Write-ColorOutput Green "NODE_HOME set to $nodeHome"
    node --version
}

function Install-AndroidSDK {
    $androidHome = [System.Environment]::GetEnvironmentVariable("ANDROID_HOME", [System.EnvironmentVariableTarget]::User)
    if (-not $androidHome) {
        $androidHome = "$env:LOCALAPPDATA\Android\Sdk"
    }
    $cmdlineTools = "$androidHome\cmdline-tools"
    $latestTools = "$cmdlineTools\latest"

    if (-not (Test-Path "$latestTools\bin\sdkmanager.bat")) {
        Write-ColorOutput Yellow "Installing Android SDK..."
        New-Item -ItemType Directory -Force -Path $cmdlineTools | Out-Null
        $toolsUrl = "https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip"
        $toolsZip = "commandlinetools.zip"
        
        # Download with progress
        $webClient = New-Object System.Net.WebClient
        $webClient.DownloadFileCompleted += {param($sender, $e) Write-Host}
        $webClient.DownloadProgressChanged += {
            param($sender, $e)
            Write-Progress -Activity "Downloading Android SDK" -Status "$($e.ProgressPercentage)% Complete:" -PercentComplete $e.ProgressPercentage
        }
        $webClient.DownloadFileAsync($toolsUrl, $toolsZip)
        
        while ($webClient.IsBusy) { Start-Sleep -Milliseconds 100 }
        Write-Progress -Activity "Downloading Android SDK" -Completed

        Expand-Archive -Path $toolsZip -DestinationPath $cmdlineTools -Force
        Remove-Item $toolsZip
        Move-Item "$cmdlineTools\cmdline-tools" $latestTools -Force

        Set-Location $latestTools\bin
        Write-ColorOutput Yellow "Accepting Android SDK licenses..."
        echo y | .\sdkmanager.bat --licenses
        Write-ColorOutput Yellow "Installing Android SDK components..."
        .\sdkmanager.bat "platform-tools" "platforms;android-30" "build-tools;30.0.3" "emulator"
        Write-ColorOutput Green "Android SDK installed successfully."
    } else {
        Write-ColorOutput Yellow "Android SDK is already installed."
    }

    [System.Environment]::SetEnvironmentVariable("ANDROID_HOME", $androidHome, [System.EnvironmentVariableTarget]::User)
    [System.Environment]::SetEnvironmentVariable("ANDROID_SDK_ROOT", $androidHome, [System.EnvironmentVariableTarget]::User)
    $newPath = "$androidHome\cmdline-tools\latest\bin;$androidHome\platform-tools;$androidHome\emulator;" + [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::User)
    [System.Environment]::SetEnvironmentVariable("Path", $newPath, [System.EnvironmentVariableTarget]::User)
    Refresh-Environment

    if (-not (Test-Path "$androidHome\platform-tools\adb.exe")) {
        Write-ColorOutput Yellow "ADB not found. Downloading and installing manually..."
        $adbZip = "platform-tools-latest-windows.zip"
        Invoke-WebRequest -Uri "https://dl.google.com/android/repository/$adbZip" -OutFile $adbZip
        Expand-Archive -Path $adbZip -DestinationPath $androidHome -Force
        Remove-Item $adbZip
    }

    if (Test-Path "$androidHome\platform-tools\adb.exe") {
        Write-ColorOutput Green "ADB installed successfully."
        & "$androidHome\platform-tools\adb.exe" version
    } else {
        Write-ColorOutput Red "ADB installation failed. Please check manually."
    }
}

function Install-Appium {
    if (Get-Command appium -ErrorAction SilentlyContinue) {
        Write-ColorOutput Yellow "Appium is already installed."
    } else {
        Write-ColorOutput Yellow "Installing Appium..."
        npm install -g appium
    }
    Refresh-Environment
    appium --version
}

function Display-DependencyStatus {
    Write-ColorOutput Blue "Dependency Status:"
    
    Write-ColorOutput Yellow "JDK:"
    Write-ColorOutput Cyan $env:JAVA_HOME
    java -version
    
    Write-ColorOutput Yellow "Node.js:"
    Write-ColorOutput Cyan $env:NODE_HOME
    node --version
    
    Write-ColorOutput Yellow "Android SDK:"
    Write-ColorOutput Cyan $env:ANDROID_HOME
    if (Test-Path "$env:ANDROID_HOME\cmdline-tools\latest\bin\sdkmanager.bat") {
        & "$env:ANDROID_HOME\cmdline-tools\latest\bin\sdkmanager.bat" --version
    } else {
        Write-ColorOutput Red "Android SDK installation seems incomplete. Please check manually."
    }
    
    Write-ColorOutput Yellow "ADB:"
    if (Test-Path "$env:ANDROID_HOME\platform-tools\adb.exe") {
        Write-ColorOutput Cyan "$env:ANDROID_HOME\platform-tools\adb.exe"
        & "$env:ANDROID_HOME\platform-tools\adb.exe" version
    } else {
        Write-ColorOutput Red "ADB not found. Please check the installation."
    }
    
    Write-ColorOutput Yellow "Appium:"
    $appiumPath = (Get-Command appium -ErrorAction SilentlyContinue).Path
    if ($appiumPath) {
        Write-ColorOutput Cyan $appiumPath
        appium --version
    } else {
        Write-ColorOutput Red "Appium not found. Please check the installation."
    }
}

Write-ColorOutput Green "Starting V3 Windows Development Environment Installation"
Install-Chocolatey
Install-JDK
Install-NodeJS
Install-AndroidSDK
Install-Appium
Display-DependencyStatus
Write-ColorOutput Green "Installation complete. Your environment is now set up."
Write-ColorOutput Magenta "Please restart your PowerShell or Command Prompt to apply all changes."
