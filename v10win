# V10 Windows Development Environment Installer
# This script installs JDK, Node.js, Android Platform Tools, and Appium

# Ensure script is run as Administrator
if (-NOT ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Error "Please run this script as Administrator"
    Exit
}

$ErrorActionPreference = "Stop"

function Write-ColorOutput($ForegroundColor) {
    $fc = $host.UI.RawUI.ForegroundColor
    $host.UI.RawUI.ForegroundColor = $ForegroundColor
    if ($args) {
        Write-Output $args
    } else {
        $input | Write-Output
    }
    $host.UI.RawUI.ForegroundColor = $fc
}

function Show-Progress($activity, $status) {
    Write-Progress -Activity $activity -Status $status -PercentComplete -1
}

function Refresh-Environment {
    $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
    $env:JAVA_HOME = [System.Environment]::GetEnvironmentVariable("JAVA_HOME", "User")
    $env:ANDROID_HOME = [System.Environment]::GetEnvironmentVariable("ANDROID_HOME", "User")
    $env:NODE_HOME = [System.Environment]::GetEnvironmentVariable("NODE_HOME", "User")
}

function Install-Chocolatey {
    if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
        Write-ColorOutput Yellow "Installing Chocolatey..."
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
        Refresh-Environment
        Write-ColorOutput Green "Chocolatey installed successfully."
    } else {
        Write-ColorOutput Yellow "Chocolatey is already installed."
    }
}

function Find-JavaHome {
    $javaHome = $null
    $possiblePaths = @(
        "C:\Program Files\Java\jdk-11*",
        "C:\Program Files\Eclipse Adoptium\jdk-11*",
        "C:\Program Files\OpenJDK\jdk-11*",
        "C:\Program Files\AdoptOpenJDK\jdk-11*"
    )

    foreach ($path in $possiblePaths) {
        $jdkPath = Get-ChildItem $path -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
        if ($jdkPath) {
            $javaHome = $jdkPath
            break
        }
    }

    if (-not $javaHome) {
        $javaExecutable = Get-Command java -ErrorAction SilentlyContinue
        if ($javaExecutable) {
            $javaHome = Split-Path (Split-Path $javaExecutable.Source -Parent) -Parent
        }
    }

    return $javaHome
}

function Install-JDK {
    $javaHome = Find-JavaHome
    if ($javaHome) {
        Write-ColorOutput Yellow "Java is already installed at $javaHome"
    } else {
        Write-ColorOutput Yellow "Installing OpenJDK 11..."
        choco install openjdk11 -y --force
        Refresh-Environment
        $javaHome = Find-JavaHome
    }

    if ($javaHome) {
        [System.Environment]::SetEnvironmentVariable("JAVA_HOME", $javaHome, [System.EnvironmentVariableTarget]::User)
        $env:JAVA_HOME = $javaHome
        Write-ColorOutput Green "JAVA_HOME set to $javaHome"
    } else {
        Write-ColorOutput Red "Failed to find Java installation. Please install Java manually and set JAVA_HOME."
    }
}

function Install-NodeJS {
    if (Get-Command node -ErrorAction SilentlyContinue) {
        Write-ColorOutput Yellow "Node.js is already installed."
    } else {
        Write-ColorOutput Yellow "Installing Node.js..."
        choco install nodejs-lts -y
        Refresh-Environment
    }
    $nodeHome = (Get-Command node -ErrorAction SilentlyContinue).Path | Split-Path -Parent
    if ($nodeHome) {
        [System.Environment]::SetEnvironmentVariable("NODE_HOME", $nodeHome, [System.EnvironmentVariableTarget]::User)
        $env:NODE_HOME = $nodeHome
        Write-ColorOutput Green "NODE_HOME set to $nodeHome"
        node --version
    } else {
        Write-ColorOutput Red "Failed to find Node.js installation. Please install Node.js manually."
    }
}

function Install-AndroidPlatformTools {
    $androidHome = [System.Environment]::GetEnvironmentVariable("ANDROID_HOME", [System.EnvironmentVariableTarget]::User)
    if (-not $androidHome) {
        $androidHome = "$env:LOCALAPPDATA\Android\Sdk"
    }
    
    if (-not (Test-Path "$androidHome\platform-tools\adb.exe")) {
        Write-ColorOutput Yellow "Installing Android Platform Tools..."
        New-Item -ItemType Directory -Force -Path $androidHome | Out-Null
        $platformToolsUrl = "https://dl.google.com/android/repository/platform-tools-latest-windows.zip"
        $platformToolsZip = "platform-tools.zip"

        Show-Progress "Downloading Android Platform Tools" "Downloading..."
        Invoke-WebRequest -Uri $platformToolsUrl -OutFile $platformToolsZip

        Show-Progress "Installing Android Platform Tools" "Extracting..."
        Expand-Archive -Path $platformToolsZip -DestinationPath $androidHome -Force
        Remove-Item $platformToolsZip

        Write-Progress -Activity "Installing Android Platform Tools" -Completed
    } else {
        Write-ColorOutput Yellow "Android Platform Tools are already installed."
    }

    [System.Environment]::SetEnvironmentVariable("ANDROID_HOME", $androidHome, [System.EnvironmentVariableTarget]::User)
    $env:ANDROID_HOME = $androidHome
    $newPath = "$androidHome\platform-tools;" + [System.Environment]::GetEnvironmentVariable("Path", [System.EnvironmentVariableTarget]::User)
    [System.Environment]::SetEnvironmentVariable("Path", $newPath, [System.EnvironmentVariableTarget]::User)
    Refresh-Environment

    if (Test-Path "$androidHome\platform-tools\adb.exe") {
        Write-ColorOutput Green "Android Platform Tools installed successfully."
    } else {
        Write-ColorOutput Red "Android Platform Tools installation failed. Please install manually."
    }
}

function Install-Appium {
    if (Get-Command appium -ErrorAction SilentlyContinue) {
        Write-ColorOutput Yellow "Appium is already installed."
    } else {
        Write-ColorOutput Yellow "Installing Appium..."
        npm install -g appium
    }
    Refresh-Environment
    appium --version
}

function Display-DependencyStatus {
    Refresh-Environment
    Write-ColorOutput Blue "Dependency Status:"
    
    Write-ColorOutput Yellow "JDK:"
    Write-ColorOutput Cyan $env:JAVA_HOME
    java -version
    
    Write-ColorOutput Yellow "Node.js:"
    Write-ColorOutput Cyan $env:NODE_HOME
    node --version
    
    Write-ColorOutput Yellow "Android Platform Tools:"
    Write-ColorOutput Cyan $env:ANDROID_HOME
    
    Write-ColorOutput Yellow "ADB:"
    if (Test-Path "$env:ANDROID_HOME\platform-tools\adb.exe") {
        Write-ColorOutput Cyan "$env:ANDROID_HOME\platform-tools\adb.exe"
        & "$env:ANDROID_HOME\platform-tools\adb.exe" version
    } else {
        Write-ColorOutput Red "ADB not found. Please check the installation."
    }
    
    Write-ColorOutput Yellow "Appium:"
    $appiumPath = (Get-Command appium -ErrorAction SilentlyContinue).Path
    if ($appiumPath) {
        Write-ColorOutput Cyan $appiumPath
        appium --version
    } else {
        Write-ColorOutput Red "Appium not found. Please check the installation."
    }
}

function Get-MercuryParsablePaths {
    $javaPath = $env:JAVA_HOME
    $androidSdkPath = $env:ANDROID_HOME
    $nodejsPath = $env:NODE_HOME
    $appiumPath = (Get-Command appium -ErrorAction SilentlyContinue).Source

    $paths = @(
        "JAVA_HOME=$javaPath",
        "ANDROID_HOME=$androidSdkPath",
        "NODE_HOME=$nodejsPath",
        "APPIUM_PATH=$appiumPath"
    )

    return $paths -join "|"
}

Write-ColorOutput Green "Starting V10 Windows Development Environment Installation"
Install-Chocolatey
Install-JDK
Install-NodeJS
Install-AndroidPlatformTools
Install-Appium
Display-DependencyStatus

$mercuryPaths = Get-MercuryParsablePaths
Write-ColorOutput Green "`nInstallation complete. Your environment is now set up."
Write-ColorOutput Magenta "Please restart your PowerShell or Command Prompt to apply all changes."
Write-ColorOutput Yellow "`nCopy the following line into Mercury to save the paths:"
Write-Output $mercuryPaths
Write-ColorOutput Yellow "`nInstructions: In Mercury, go to the settings section and look for an option to import or update paths. Paste the above line there to update your Mercury settings with these paths."
